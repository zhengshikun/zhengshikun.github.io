<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[vscode插件]]></title>
    <url>%2F2018%2F12%2F11%2Fvscode%E6%8F%92%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[Visual Studio Code（以下简称vscode）是一个轻量且强大的代码编辑器，支持Windows，OS X和Linux。内置JavaScript、TypeScript和Node.js支持，而且拥有丰富的插件生态系统，可通过安装插件来支持C++、C#、Python、PHP等其他语言。 插件推荐 插件 说明 ComputerAuto Close Tag 自动添加HTML / XML关闭标签 Auto Rename Tag 自动重命名配对的HTML / XML标签 Beautify 格式化代码 Bracket Pair Colorizer 颜色识别匹配括号 Code Runner 能够运行多种语言的代码片段或代码文件 Chinese (Simplified) Language Pack for Visual Studio Code 中文简体包 Color Info 为你提供你在 CSS 中使用颜色的相关信息。 CSS Peek 可以追踪至样式表中 CSS 类和 ids 定义的地方。当你在 HTML 文件中右键单击选择器时，选择“ Go to Definition 和 Peek definition ”选项，它便会给你发送样式设置的 CSS 代码 Debugger for Chrome 前端调试, 查看使用方法 ESLint EsLint可以帮助我们检查Javascript编程时的语法错误。 filesize 在底部状态栏显示当前文件大小，点击后还可以看到详细创建、修改时间 Git History 以图表的形式查看 git 日志 GitLens — Git supercharged 显示文件最近的 commit 和作者，显示当前行 commit 信息 HTML Boilerplate 通过使用 HTML 模版插件，你就摆脱了为 HTML 新文件重新编写头部和正文标签的苦恼。你只需在空文件中输入 html，并按 Tab 键，即可生成干净的文档结构 HTMLHint HTML 代码格式检测 HTML Snippets 代码自动填充 htmltagwrap 在选中HTML标签中外面套一层标签”Alt + W” (“Option + W” for Mac) Image Preview 鼠标移到路径里显示图像预览 Indenticator 突出目前的缩进深度 intelliSense for CSS class names in HTML 把项目中 css 文件里的名称智能提示在 html 中 JavaScript (ES6) code snippets es6代码片段 Live Server 浏览器实时刷新 Node.js Modules Intellisense 可以在导入语句中自动完成JavaScript / TypeScript模块 npm Intellisense require 时的包提示 Path Intellisense 路径自动补全 Quokka.js Quokka 是一个调试工具插件，能够根据你正在编写的代码提供实时反馈使用方法: ctrl+shift+p 输入quokka选择 new javascript 就可以了 Regex Previewer 这是一个用于实时测试正则表达式的实用工具。它可以将正则表达式模式应用在任何打开的文件上，并高亮所有的匹配项 SVG Viewer 此插件在 Visual Studio 代码中添加了许多实用的 SVG 程序，你无需离开编辑器，便可以打开 SVG 文件并查看它们。同时，它还包含了用于转换为 PNG 格式和生成数据 URI 模式的选项 Vetur Vue 语法高亮显示, 语法错误检查, 代码自动补全(配合 ESLint 插件效果更佳) vscode-fileheader 顶部注释模板，可定义作者、时间等信息，并会自动更新最后修改时间快捷键: Ctrl+Alt+i(默认信息可在 文件→首选项→设置 中修改) 结尾写这篇文章主要是想偷个懒，以后安装插件不用去查，之后会继续更新新的插件当作仓库。 原文是：https://blog.csdn.net/shenxianhui1995/article/details/81604818]]></content>
      <categories>
        <category>常用工具</category>
      </categories>
      <tags>
        <tag>插件</tag>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[原生的Ajax]]></title>
    <url>%2F2018%2F12%2F11%2F%E5%8E%9F%E7%94%9F%E7%9A%84ajax%2F</url>
    <content type="text"><![CDATA[Ajax = 异步JavaScript和xml。Ajax是一种用于创建快速动态网页的技术。通过在后台与服务器进行少量数据交换，Ajax 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。传统的网页（不使用 Ajax）如果需要更新内容，必需重载整个网页面。 创建XMLHttpRequest对象XMLHttpRequest 用于在后台与服务器交换数据。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。 1let xhr = new XMLHttpRequest(); 向服务器发送请求请求如需将请求发送到服务器，我们使用 XMLHttpRequest 对象的 open() 和 send() 方法： 12xhr.open(method,url,async) xhr.send(string) method: string，请求的类型；GET 或 POSTurl: string,文件在服务器上的位置async: Boolean，true（异步）或 false（同步)string: string,仅用于 POST 请求,将请求发送到服务器。 服务器响应如需获得来自服务器的响应，请使用 XMLHttpRequest 对象的 responseText 或 responseXML 属性。 12responseText // 获得字符串形式的响应数据responseXML // 获得 XML 形式的响应数据 onreadystatechange 事件当请求被发送到服务器时，我们需要执行一些基于响应的任务。每当 readyState 改变时，就会触发 onreadystatechange 事件readyState 属性存有 XMLHttpRequest 的状态信息。 onreadystatechange: 存储函数（或函数名），每当 readyState 属性改变时，就会调用该函数。 readyState: 存有 XMLHttpRequest 的状态。从 0 到 4 发生变化。 0: 请求未初始化1: 服务器连接已建立2: 请求已接收3: 请求处理中4: 请求已完成，且响应已就绪 status: 200: “OK”,404: 未找到页面 实例 123456xhr.onreadystatechange=function()&#123; if (xhr.readyState==4 &amp;&amp; xhr.status==200) &#123; document.getElementById(&quot;div&quot;).innerHTML=xhr.responseText; &#125;&#125; 完整版使用回调函数回调函数是一种以参数形式传递给另一个函数的函数。 如果您的网站上存在多个 Ajax 任务，那么您应该为创建 XMLHttpRequest 对象编写一个标准的函数，并为每个 Ajax 任务调用该函数。 该函数调用应该包含 URL 以及发生 onreadystatechange 事件时执行的任务（每次调用可能不尽相同): 12345678910111213function loadXMLDoc (url, cfunc) &#123; let xhr = new XMLHttpRequest(); xhr.onreadystatechange = cfunc; xhr.open(&quot;GET&quot;,url,true); xhr.send();&#125;function myFunction () &#123; loadXMLDoc(&quot;ajax.txt&quot;, function () &#123; if(xhr.readyState == 4 &amp;&amp; xhr.status == 200)&#123; document.getElementById(&quot;div&quot;).innerHTML = xhr.responseText; &#125; )&#125;&#125;]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>Ajax</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git的常用命令]]></title>
    <url>%2F2018%2F12%2F11%2Fgit%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[Git是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。Git 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。 工作流程 克隆 Git 资源作为工作目录。在克隆的资源上添加或修改文件。如果其他人修改了，你可以更新资源。在提交前查看修改。提交修改。在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。 创建仓库git initgit init 命令来初始化一个 Git 仓库，Git 的很多命令都需要在 Git 的仓库中运行，所以 git init 是使用 Git 的第一个命令。 git clonegit clone 从现有 Git 仓库中拷贝项目 1git clone &lt;repo&gt; &lt;directory&gt; repo: Git仓库directory: 本地目录。 基本操作git add将想要快照的内容写入缓存区 使用 git add . 命令来添加当前项目的所有文件。 git status以查看在你上次提交之后是否有修改。 加 -s 参数，以获得简短的结果输出。 git diff查看执行 git status 的结果的详细信息。 尚未缓存的改动：git diff查看已缓存的改动： git diff --cached查看已缓存的与未缓存的所有改动：git diff HEAD显示摘要而非整个 diff：git diff --stat git commit将缓存区内容添加到仓库中。 如果你觉得 git add 提交缓存的流程太过繁琐，Git 也允许你用 -a 选项跳过这一步。 1git commit -a git reset HEAD用于取消已缓存的内容。 git rm从 Git 中移除某个文件，就必须要从已跟踪文件清单中移除，然后提交。 1git rm &lt;file&gt; 如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 -f 1git rm -f &lt;file&gt; 如果把文件从暂存区域移除，但仍然希望保留在当前工作目录中，换句话说，仅是从跟踪清单中删除， 1git rm --cached &lt;file&gt; git mvgit mv 命令用于移动或重命名一个文件、目录、软连接。 git分支管理几乎每一种版本控制系统都以某种形式支持分支。使用分支意味着你可以从开发主线上分离开来，然后在不影响主线的同时继续工作。 创建分支命令： 1git branch (branchname) 切换分支命令: 1git checkout (branchname) 当你切换分支的时候，Git 会用该分支的最后提交的快照替换你的工作目录的内容， 所以多个分支不需要多个目录。 合并分支命令: 1git merge 列出分支基本命令： 1git branch 删除分支命令： 1git branch -d (branchname) Git 查看提交历史使用 git log 命令查看 用 --oneline 选项来查看历史记录的简洁的版本。 1git log --oneline 用 --graph 选项，查看历史中什么时候出现了分支、合并。 1git log --oneline --graph 用 --reverse参数来逆向显示所有日志。 1git log --reverse --oneline 如果只想查找指定用户的提交日志可以使用命令：git log --author 1git log --author=Linus --oneline -5 Git 标签如果你达到一个重要的阶段，并希望永远记住那个特别的提交快照，你可以使用 git tag 给它打上标签。 1git tag -a v1.0 Git 远程仓库(Github)添加远程库12git remote add [shortname] [url]git remote add origin https:// 查看当前的远程库12git remotegit remote -v 提取远程仓库从远程仓库下载新分支与数据： 1git fetch 从远端仓库提取数据并尝试合并到当前分支： 1git merge 推送到远程仓库12git push [alias] [branch]git push -u origin master -u: 第一次提交时用，之后不需要origin: 远程仓库 删除远程仓库1git remote rm [别名]]]></content>
      <categories>
        <category>常用工具</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo+next主题优化]]></title>
    <url>%2F2018%2F12%2F10%2Fhexo-next%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96%2F</url>
    <content type="text"><![CDATA[hexo官方提供的主题实在是不怎么美观，所以开发人员就制作了第三方主题，当然主题有很多，而今天我说的next主题。关于hexo的搭建可以去官方文档，很全面，按步骤走一遍基本就会用了。 next主题的配置设置主题风格打开 themes/next/_config.yml 文件，搜索 Schemes 关键字，将你需用启用的 scheme 前面注释 # 去除即可。 12345# Schemes# scheme: Musescheme: Mist#scheme: Pisces#scheme: Gemini 设置菜单项的显示文本和图标设置菜单项的显示中文文本打开 themes/next/languages/zh-Hans.yml 文件,搜索 menu 关键字，修改对应中文或者新增。 12345678910menu: home: 首页 archives: 归档 categories: 分类 tags: 标签 about: 关于我 search: 搜索 schedule: 日程表 sitemap: 站点地图 commonweal: 公益404 设定菜单项的文件目录和对应图标打开 themes/next/_config.yml 文件，搜索 menu_icons 关键字，修改对应图标名称或者新增对应 menu 的图标。 12345678910111213menu: 首页: / || home 标签: /tags/ || tags 分类: /categories/ || th 归档: /archives/ || archive 关于我: /about/ || user # schedule: /schedule/ || calendar # sitemap: /sitemap.xml || sitemap # commonweal: /404/ || heartbeat# Enable/Disable menu icons.menu_icons: enable: true 除了 home， archives , /后面都需要手动创建这个页面 创建菜单项对应文件目录,以分类为例使用 hexo new page 新建一个页面(不知道hexo命令可以去官方文档看)，命名为 categories ： 1$ hexo new page categories 编辑刚新建的页面,设置分类 12345---title: 分类date: 2018-12-10 14:05:23type: &quot;categories&quot;--- 头像设置添加头像打开 themes/next/_config.yml 文件，搜索 Sidebar Avatar 关键字，去掉 avatar 前面的#,把图片放入 themes/next/source/images 下,修改 avatar： 1234# Sidebar Avatar# in theme directory(source/images): /images/avatar.gif# in site directory(source/uploads): /uploads/avatar.gifavatar: /uploads/avatar.png 设置头像边框为圆形框打开位于 themes/next/source/css/_common/components/sidebar/sidebar-author.syl 文件,修改如下: 123456789101112.site-author-image &#123; display: block; margin: 0 auto; padding: $site-author-image-padding; max-width: $site-author-image-width; height: $site-author-image-height; border: $site-author-image-border-width solid $site-author-image-border-color; // 修改头像边框 border-radius: 50%; -webkit-border-radius: 50%; -moz-border-radius: 50%;&#125; 特效：鼠标放置头像上旋转123456789101112131415161718192021.site-author-image &#123; display: block; margin: 0 auto; padding: $site-author-image-padding; max-width: $site-author-image-width; height: $site-author-image-height; border: $site-author-image-border-width solid $site-author-image-border-color; // 修改头像边框 border-radius: 50%; -webkit-border-radius: 50%; -moz-border-radius: 50%; // 设置旋转 transition: 1.4s all;&#125;// 可旋转的圆形头像,`hover`动作.site-author-image:hover &#123; -webkit-transform: rotate(360deg); -moz-transform: rotate(360deg); -ms-transform: rotate(360deg); -transform: rotate(360deg);&#125; 浏览页面的时候显示当前浏览进度打开 themes/next/_config.yml ,搜索关键字 scrollpercent ,把 false 改为 true。 12# Scroll percent label in b2t button.scrollpercent: true 侧边栏设置设置侧边栏社交链接打开 themes/next/_config.yml 文件,搜索关键字 social ,然后添加社交站点名称与地址即可。 123456789101112social: GitHub: https://github.com/zhengshikun || github E-Mail: mailto:646537311@qq.com || envelope #Google: https://plus.google.com/yourname || google #Twitter: https://twitter.com/yourname || twitter #FB Page: https://www.facebook.com/yourname || facebook #VK Group: https://vk.com/yourname || vk #StackOverflow: https://stackoverflow.com/yourname || stack-overflow #YouTube: https://youtube.com/yourname || youtube #Instagram: https://instagram.com/yourname || instagram #Skype: skype:yourname?call|chat || skype 微博: https://weibo.com/u/3922341463?topnav=1&amp;wvr=6&amp;topsug=1 || weibo RSS在你 Hexo 站点目录下： 1$ npm install hexo-generator-feed --save 打开 Hexo 站点下的 _config.yml ,添加如下配置： 12345678# feed# Dependencies: https://github.com/hexojs/hexo-generator-feedfeed: type: atom path: atom.xml limit: 20 hub: content: 友情链接打开 themes/next/_config.yml 文件,搜索关键字 Blog rolls： 12345678# Blog rollslinks_icon: linklinks_title: 友情连接#links_layout: blocklinks_layout: inlinelinks: #Title: http://example.com/ 百度: https://baidu.com/ 底部建站时间和图标修改打开 themes/next/_config.yml 文件,搜索关键字footer: 12345678910111213141516171819footer: # Specify the date when the site was setup. # If not defined, current year will be used. since: 2018 # Icon between year and copyright info. icon: snowflake-o # If not defined, will be used `author` from Hexo main config. copyright: # ------------------------------------------------------------- # Hexo link (Powered by Hexo). powered: false theme: # Theme &amp; scheme info link (Theme - NexT.scheme). enable: false # Version info of NexT after scheme info (vX.X.X). # version: true 把用户的图标从小人user改成了雪花snowflake-o copyright留空，显示成页面author即我的名字 powered: false把hexo的授权图片取消了 theme: enable:false 把主题的内容也取消了 主页文章添加边框阴影效果打开 themes/next/source/css/_custom/custom.styl ,向里面加代码: 12345678// 主页文章添加阴影效果.post &#123; margin-top: 0px; margin-bottom: 60px; padding: 25px; -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5); -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);&#125; 开启版权声明主题配置文件下,搜索关键字 post_copyright , enable 改为 true： 12345# Declare license on postspost_copyright: enable: true license: CC BY-NC-SA 3.0 license_url: https://creativecommons.org/licenses/by-nc-sa/3.0/ 本地搜索在你站点的根目录下 1$ npm install hexo-generator-searchdb --save 打开 Hexo 站点的 _config.yml,添加配置 12345search: path: search.xml field: post format: html limit: 10000 打开 themes/next/_config.yml ,搜索关键字 local_search ,设置为 true： 123456789# Local search# Dependencies: https://github.com/flashlab/hexo-generator-searchlocal_search: enable: true # if auto, trigger search by changing input # if manual, trigger search by pressing enter key or search button trigger: auto # show top n results per article, show all results by setting to -1 top_n_per_article: 1 统计功能,显示文章字数统计,阅读时长,总字数1$ npm i --save hexo-wordcount 打开 themes/next/_config.yml ，搜索关键字 post_wordcount： 12345678# Post wordcount display settings# Dependencies: https://github.com/willin/hexo-wordcountpost_wordcount: item_text: true wordcount: true min2read: true totalcount: true separated_meta: true 修改文章内文本连接样式打开 themes/next/source/css/_custom/custom.styl,添加代码： 1234567891011// 文章内链接文本样式.post-body p a&#123; color: #999; border-bottom: none; border-bottom: 1px solid #999; &amp;:hover &#123; color: #666; border-bottom: none; border-bottom: 1px solid #666; &#125;&#125; 本地站点推送到GitHub上在站点更目录下： 1$ npm install hexo-deployer-git --save 在 Hexo 站点的 _config.yml 中配置 deploy： 123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: &lt;repository url&gt; #your github.io.git branch: master 1$ hexo clean 1$ hexo d --g 详情参考官方文档 添加网易云音乐在网易云音乐（网页版）中搜索我们想要插入的音乐，然后点击生成外链播放器,然后根据你得设置生成相应的html代码，将获得的html代码插入到你想要插入的位置。 我放在了侧边栏，在 themes/next/layout/_custom/sidebar.swig 文件中增加生成的HTML代码： 123&lt;div id=&quot;music163player&quot;&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=298 height=52 src=&quot;//music.163.com/outchain/player?type=2&amp;id=27583241&amp;auto=1&amp;height=32&quot;&gt;&lt;/iframe&gt;&lt;/div&gt; 结尾放我npm安装的一些插件 1234567891011121314151617&quot;dependencies&quot;: &#123; &quot;hexo&quot;: &quot;^3.7.0&quot;, &quot;hexo-asset-image&quot;: &quot;0.0.3&quot;, &quot;hexo-deployer-git&quot;: &quot;^0.3.1&quot;, &quot;hexo-generator-archive&quot;: &quot;^0.1.5&quot;, &quot;hexo-generator-category&quot;: &quot;^0.1.3&quot;, &quot;hexo-generator-cname&quot;: &quot;^0.3.0&quot;, &quot;hexo-generator-feed&quot;: &quot;^1.2.2&quot;, &quot;hexo-generator-index&quot;: &quot;^0.2.1&quot;, &quot;hexo-generator-searchdb&quot;: &quot;^1.0.8&quot;, &quot;hexo-generator-tag&quot;: &quot;^0.2.0&quot;, &quot;hexo-renderer-ejs&quot;: &quot;^0.3.1&quot;, &quot;hexo-renderer-marked&quot;: &quot;^0.3.2&quot;, &quot;hexo-renderer-stylus&quot;: &quot;^0.3.3&quot;, &quot;hexo-server&quot;: &quot;^0.3.1&quot;, &quot;hexo-wordcount&quot;: &quot;^6.0.1&quot; &#125;]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[博客的第一篇文章]]></title>
    <url>%2F2018%2F12%2F08%2F%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%2F</url>
    <content type="text"><![CDATA[你好哇！这是我的第一篇文章，当你看到这里的时候就代表我成功运行啦！庆祝~关于第一篇也没啥说的，我下面就测试markdown常用的语法吧 Markdown简介Markdown 是一种轻量级标记语言，创始人为约翰·格鲁伯和亚伦·斯沃茨。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML文档”。 ——维基百科 Markdown语法标题123456# 欢迎使用Markdown编辑器写博客 //一级标题 对应 &lt;h1&gt; &lt;/h1&gt;## 标题输入 //二级标题 对应 &lt;h2&gt; &lt;/h2&gt;### 三级标题 //三级标题 对应 &lt;h3&gt; &lt;/h3&gt;#### 四级标题 //四级标题 对应 &lt;h4&gt; &lt;/h4&gt;##### 五级标题 //五级标题 对应 &lt;h5&gt; &lt;/h5&gt;###### 六级标题 //六级标题 对应 &lt;h6&gt; &lt;/h6&gt; 这是四级标题 内容强调加粗、斜体123字体 **加粗** 显示字体 *斜体* 显示字体 ***加粗并斜体*** 显示 字体 加粗 显示字体 斜体 显示字体 加粗并斜体 显示 删除线1这样来 ~~删除一段文本~~ 删除一段文本 高亮12使用&lt;code&gt;\`&lt;/code&gt;来强调字符 // 想打出 ` (反引号)需要转义的比如`突出背景色`来显示强调效果 使用`来强调字符比如突出背景色来显示强调效果 引用显示1234&gt; 每行开始都使用 &apos;&gt;&apos;；&gt; 引用**开始**；&gt; 引用**换行**；&gt; 引用**结束**。 每行开始都使用 ‘&gt;’；引用开始；引用换行；引用结束。 表格12345列1 | 列2 | 列3 ----- | --- | ---- 第1行 | 12 | 13 第2行 | 22 | 23 第3行 | 32 | 33 列1 列2 列3 第1行 12 13 第2行 22 23 第3行 32 33 可以使用冒号来定义对齐方式： 1234| 左对齐 | 右对齐 | 居中 || :-------- | -------:| :--: || Computer | 5000 元 | 1台 || Phone | 1999 元 | 1部 | 左对齐 右对齐 居中 Computer 5000 元 1台 Phone 1999 元 1部 代码块代码块语法遵循标准 markdown 代码，使用三个`开始,三个`结束 123``` 这里是内容``` 链接插入12[首页](https://zhengshikun.site)[关于我](/about/) 首页关于我 图片插入1![我的头像](/博客的第一篇文章/avatar.png) 列表无序列表123* 列表展示+ 列表展示- 列表展示 列表展示 列表展示 列表展示 有序列表121. **我是一级序列** 1. *我是二级序列* 我是一级序列 我是二级序列 链接自动检测12首页:https://zhengshikun.site我的信息:https://zhengshikun.site/about/ 首页:https://zhengshikun.site我的信息:https://zhengshikun.site/about/]]></content>
      <categories>
        <category>常用工具</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
        <tag>markdown</tag>
      </tags>
  </entry>
</search>
